def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col:
            return False
        if abs(i - row) == abs(board[i] - col):
            return False
    return True
def solve_queens(board, row):
    n = len(board)
    if row == n:
        return True
    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            if solve_queens(board, row + 1):
                return True
            board[row] = -1
    return False
def print_solution(board):
    n = len(board)
    for i in range(n):
        row = ['Q' if board[i] == j else '.' for j in range(n)]
        print(' '.join(row))
def solve_n_queens(n):
    board = [-1] * n
    if solve_queens(board, 0):
        print("Solution exists:")
        print_solution(board)
    else:
        print("No solution exists.")
solve_n_queens(8)
